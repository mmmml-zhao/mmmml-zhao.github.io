---
layout: main
title: 国际化MCP服务
date: 2025-09-02 11:03:30 +0800
description: 编写MCP服务，快速实现react项目国际化。
tags: [MCP,国际化,React,i18n]
---

## 前言
8 月 8 日我发布了《AI 的使用 - MCP 国际化初实现》。我基于既有插件做了扩展，并能在 IDE 中通过 MCP 服务调用这些能力。后续优化中我发现：此前误以为无法通过 MCP 的 tool 让 IDE 的 AI 执行“下一步动作”，于是选择了“API 调用本地 AI 服务”的绕路，结果既慢、质量也不稳定。

## 为什么要优化
实测表明：只要在 tool 的返回值中用 text 清晰描述下一步 prompt，AI 会正确理解并继续执行。例如：
```js
return {
    content: [
      {
        type: "text",
        text: `✅ 翻译文件导出完成！\n\n${stdout}\n\n📋 下一步操作：\n1. 将生成的 Excel 文件交给翻译人员进行翻译\n2. 翻译完成后，AI 助手可调用相应工具导入翻译内容`,
      },
    ],
};
```
这意味着我们可以把“流程编排”交给 AI，而工具仅负责“提供能力与结果”。

## 两种运行模式
为兼顾不同环境，我将工具拆分为两种模式，逻辑一致，仅运行入口不同。

### 本地 NPX 模式
1. 创建配置
2. 完善配置 → 编辑配置文件
3. 生成工具文件
4. 提取文本 → 提取/判断/替换
5. 导出文本
6. 翻译处理

### MCP 服务模式
1. AI 创建配置
2. 生成工具文件 → 配置路径别名，并设置 provide
3. 收集候选文本
4. AI 智能分析与翻译
   - 判断哪些文本需要国际化
   - 为需要国际化的文本生成语义化 key
   - 直接翻译到所有目标语言
5. 执行替换
6. AI 语法检查
7. 导出翻译
8. 翻译处理

## 维护与更新
- 翻译更新
- 新增文本（增量处理）

## 国际化提示词
> 该项目需要国际化，需要中文和英语两种语言，默认语言是中文。请使用 MCP 服务完成国际化。

## 成果
- 将本地运行与 MCP 服务运行解耦，仅对“提取与判定”做环境拆分，其余逻辑保持一致。
- 完成国际化全流程自动化：每一步执行后只需在返回文本中描述“下一步”，无需修改任何代码文件，即可按步骤完成全流程并生成国际化代码。
- 无 AI IDE 时可使用本地 NPX + 外挂 AI 服务完成全流程；若本地也无 AI API，可降级为纯本地命令模式，此时仅提取“确定需要翻译”的文本，需人工介入判定类内容。

## AI 应用举例
在该项目中，我通过 MCP 服务与 IDE 的 AI 对话，实现了多项自动化能力，例如：
- 检查并安装指定 npm 包
- 自动识别项目内容并配置 config 文件
- 添加必要的配置代码
- 识别导出文本并翻译为多语言
- 代码替换后进行语法检查

